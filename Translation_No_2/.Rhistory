class(shopList$V1)
## [1] "factor"
# The type of this variable is factor
# and we don't like that, for what we want to do
# We want "character"
shopList[] = lapply(shopList, as.character)
class(shopList$V1)
## [1] "character"
test1 = shopList[   1 , #rows
] #columns
# empty means ALL!
test1 = shopList[1, ]
class(test1)
## [1] "data.frame"
test2 = shopList[ , 1]
class(test2)
## [1] "character"
test3 = shopList[ , c(1,2)]
# delete row 1 and 18 from shopList
shopList = shopList[ -c(1,18) ,  ]
#columns to select
sel = seq(1, 9, by=2)
shopList1 = shopList[ , sel]
rm(list = ls(pattern = "^test"))
# Tests for getting all shopping items in one column
test1 = c(shopList$V1,
shopList$V3,
shopList$V5,
shopList$V7,
shopList$V9
)
test1 = as.data.frame(test1)
test2 = c() #initialization
for (i in 1:ncol(shopList)){
# Here is our algorithm
test2 = c(test2, shopList[ , i])
}
test2 = as.data.frame(test2)
shopList = test2
class(shopList)
## [1] "data.frame"
# Change name of the single variable in shopList
names(shopList) = "item"
class(shopList$item)
## [1] "factor"
#Convert this to character
shopList[] = lapply(shopList, as.character)
class(shopList$item)
shopList[,1]
## [1] "character"
sink("inspectWhatWeAreDoing.txt", append=FALSE)
print(shopList$item == "")
##   [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [12]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
##  [23] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
##  [34]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
##  [45] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE
##  [56] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [67] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE
##  [78] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [89] FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [100] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE
## [111]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [122] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE
## [133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [144] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE
## [155] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
## [166]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [177] FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
## [188]  TRUE  TRUE  TRUE
which(shopList$item == "")
##  [1]  12  13  14  15  16  27  28  29  30  31  32  33  34  35  36  37  38
## [18]  50  51  52  53  54  74  75  76  90  91  92 106 107 108 109 110 111
## [35] 112 113 114 128 129 130 149 150 151 152 162 163 164 165 166 167 168
## [52] 179 182 183 184 185 186 187 188 189 190
sink()
file.show("inspectWhatWeAreDoing.txt")
# In class, we got until here.
# Now we still want to drop the empty rows from shopList
# In class, I still typed the following (how commented out with hashtags)
# shopList = shopList[-which(shopList$item == "") , ]
# This does not yield the desired result, for somewhat complicated reasons
# Let's not bother right now.
# Instead, the following works
shopList = as.data.frame(shopList$item[-which(shopList$item == "") ])
names(shopList) = "item"
shopList = as.data.frame(shopList$item[-which(shopList$item == "") ])
names(shopList) = "item"
shopList
shopList
shopList
#################
# Lecture 2 live
#################
# Topics of this lecture
# 1) Juggling with dataframes
# 2) Reading data from a website
# 3) Package
# 4) Loops
# 5) Drawing random numbers from a particular
#   distribution (if we get there)
# Install XML package
# Do this only once per machine!
# It's like an app
# install.packages("XML")
# Call the package/library
# Do this in every session
rm(list = ls())
library("XML")
shopList_0 = readHTMLTable("http://www.einkaufszettel.de/einkaufslisten/einkaufszettel-vorlage")
class(shopList_0)
shopList_0
## [1] "list"
# This is a list, new data type
length(shopList_0)
## [1] 2
# Select second list item
shopList = shopList_0[[2]]
class(shopList)
## [1] "data.frame"
class(shopList$V1)
## [1] "factor"
# The type of this variable is factor
# and we don't like that, for what we want to do
# We want "character"
shopList[] = lapply(shopList, as.character)
class(shopList$V1)
## [1] "character"
test1 = shopList[   1 , #rows
] #columns
# empty means ALL!
test1 = shopList[1, ]
class(test1)
## [1] "data.frame"
test2 = shopList[ , 1]
class(test2)
## [1] "character"
test3 = shopList[ , c(1,2)]
# delete row 1 and 18 from shopList
shopList = shopList[ -c(1,18) ,  ]
#columns to select
sel = seq(1, 9, by=2)
shopList1 = shopList[ , sel]
rm(list = ls(pattern = "^test"))
# Tests for getting all shopping items in one column
test1 = c(shopList$V1,
shopList$V3,
shopList$V5,
shopList$V7,
shopList$V9
)
test1 = as.data.frame(test1)
test2 = c() #initialization
for (i in 1:ncol(shopList)){
# Here is our algorithm
test2 = c(test2, shopList[ , i])
}
test2 = as.data.frame(test2)
shopList = test2
class(shopList)
## [1] "data.frame"
# Change name of the single variable in shopList
names(shopList) = "item"
class(shopList$item)
## [1] "factor"
#Convert this to character
shopList[] = lapply(shopList, as.character)
class(shopList$item)
shopList[,1]
## [1] "character"
sink("inspectWhatWeAreDoing.txt", append=FALSE)
print(shopList$item == "")
##   [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [12]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
##  [23] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
##  [34]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
##  [45] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE
##  [56] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [67] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE
##  [78] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [89] FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [100] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE
## [111]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [122] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE
## [133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [144] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE
## [155] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
## [166]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [177] FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
## [188]  TRUE  TRUE  TRUE
which(shopList$item == "")
##  [1]  12  13  14  15  16  27  28  29  30  31  32  33  34  35  36  37  38
## [18]  50  51  52  53  54  74  75  76  90  91  92 106 107 108 109 110 111
## [35] 112 113 114 128 129 130 149 150 151 152 162 163 164 165 166 167 168
## [52] 179 182 183 184 185 186 187 188 189 190
sink()
file.show("inspectWhatWeAreDoing.txt")
# In class, we got until here.
# Now we still want to drop the empty rows from shopList
# In class, I still typed the following (how commented out with hashtags)
# shopList = shopList[-which(shopList$item == "") , ]
# This does not yield the desired result, for somewhat complicated reasons
# Let's not bother right now.
# Instead, the following works
shopList = as.data.frame(shopList$item[-which(shopList$item == "") ])
shopList = as.data.frame(shopList$item[-which(shopList$item == "") ])
names(shopList) = "item"
names(shopList)
shopList
#################
# Lecture 2 live
#################
# Topics of this lecture
# 1) Juggling with dataframes
# 2) Reading data from a website
# 3) Package
# 4) Loops
# 5) Drawing random numbers from a particular
#   distribution (if we get there)
# Install XML package
# Do this only once per machine!
# It's like an app
# install.packages("XML")
# Call the package/library
# Do this in every session
rm(list = ls())
library("XML")
shopList_0 = readHTMLTable("http://www.einkaufszettel.de/einkaufslisten/einkaufszettel-vorlage")
class(shopList_0)
shopList_0
## [1] "list"
# This is a list, new data type
length(shopList_0)
## [1] 2
# Select second list item
shopList = shopList_0[[2]]
class(shopList)
## [1] "data.frame"
class(shopList$V1)
## [1] "factor"
# The type of this variable is factor
# and we don't like that, for what we want to do
# We want "character"
shopList[] = lapply(shopList, as.character)
class(shopList$V1)
## [1] "character"
test1 = shopList[   1 , #rows
] #columns
# empty means ALL!
test1 = shopList[1, ]
class(test1)
## [1] "data.frame"
test2 = shopList[ , 1]
class(test2)
## [1] "character"
test3 = shopList[ , c(1,2)]
# delete row 1 and 18 from shopList
shopList = shopList[ -c(1,18) ,  ]
#columns to select
sel = seq(1, 9, by=2)
shopList1 = shopList[ , sel]
rm(list = ls(pattern = "^test"))
# Tests for getting all shopping items in one column
test1 = c(shopList$V1,
shopList$V3,
shopList$V5,
shopList$V7,
shopList$V9
)
test1 = as.data.frame(test1)
test2 = c() #initialization
for (i in 1:ncol(shopList)){
# Here is our algorithm
test2 = c(test2, shopList[ , i])
}
test2 = as.data.frame(test2)
shopList = test2
class(shopList)
## [1] "data.frame"
# Change name of the single variable in shopList
names(shopList) = "item"
class(shopList$item)
## [1] "factor"
#Convert this to character
shopList[] = lapply(shopList, as.character)
class(shopList$item)
shopList[,1]
## [1] "character"
sink("inspectWhatWeAreDoing.txt", append=FALSE)
print(shopList$item == "")
##   [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [12]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
##  [23] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
##  [34]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE
##  [45] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE
##  [56] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [67] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE
##  [78] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [89] FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [100] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE
## [111]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [122] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE
## [133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [144] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE
## [155] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
## [166]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [177] FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
## [188]  TRUE  TRUE  TRUE
which(shopList$item == "")
##  [1]  12  13  14  15  16  27  28  29  30  31  32  33  34  35  36  37  38
## [18]  50  51  52  53  54  74  75  76  90  91  92 106 107 108 109 110 111
## [35] 112 113 114 128 129 130 149 150 151 152 162 163 164 165 166 167 168
## [52] 179 182 183 184 185 186 187 188 189 190
sink()
#file.show("inspectWhatWeAreDoing.txt")
# In class, we got until here.
# Now we still want to drop the empty rows from shopList
# In class, I still typed the following (how commented out with hashtags)
# shopList = shopList[-which(shopList$item == "") , ]
# This does not yield the desired result, for somewhat complicated reasons
# Let's not bother right now.
# Instead, the following works
shopList = as.data.frame(shopList$item[-which(shopList$item == "") ])
names(shopList) = "item"
shopList
?sink
LETTERS
class(LETTERS)
a = Letters
a = LETTERS
sayHello(a)
sayHello = function(name){
paste0("Hello ", name,
", how are you doing today?")
}
a = ["am", "arsch"]
sayHello(a)
b = ["am", "arsch"]
sayHello = function(name){
paste0("Hello ", name,
", how are you doing today?")
}
b = ["am", "arsch"]
sayHello(a)
sayHello = function(name){
paste0("Hello ", name,
", how are you doing today?")
}
b = ["am", "arsch"]
sayHello(b)
b = ["am", "arsch"]
b = [1,2]
b = ([1,2])
b = c(1,2)
class(b)
sayHello(b)
sayHello(b)
class(b[1])
sayHello(b)
#############
# Functions #
#############
sayHello = function(name){
paste0("Hello ", name,
", how are you doing today?")
}
sayHello("Sabrina")
## [1] "Hello Sabrina, how are you doing today?"
sayHello("Christian")
## [1] "Hello Christian, how are you doing today?"
LETTERS
##  [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q"
## [18] "R" "S" "T" "U" "V" "W" "X" "Y" "Z"
sayHello(LETTERS)
##  [1] "Hello A, how are you doing today?"
##  [2] "Hello B, how are you doing today?"
##  [3] "Hello C, how are you doing today?"
##  [4] "Hello D, how are you doing today?"
##  [5] "Hello E, how are you doing today?"
##  [6] "Hello F, how are you doing today?"
##  [7] "Hello G, how are you doing today?"
##  [8] "Hello H, how are you doing today?"
##  [9] "Hello I, how are you doing today?"
## [10] "Hello J, how are you doing today?"
## [11] "Hello K, how are you doing today?"
## [12] "Hello L, how are you doing today?"
## [13] "Hello M, how are you doing today?"
## [14] "Hello N, how are you doing today?"
## [15] "Hello O, how are you doing today?"
## [16] "Hello P, how are you doing today?"
## [17] "Hello Q, how are you doing today?"
## [18] "Hello R, how are you doing today?"
## [19] "Hello S, how are you doing today?"
## [20] "Hello T, how are you doing today?"
## [21] "Hello U, how are you doing today?"
## [22] "Hello V, how are you doing today?"
## [23] "Hello W, how are you doing today?"
## [24] "Hello X, how are you doing today?"
## [25] "Hello Y, how are you doing today?"
## [26] "Hello Z, how are you doing today?"
# A function that calculates saving needs for retirement
########################################################
# The input values for the calculation
spending = 5000
interestRate = 4
T = 30
# The stupid way to program...
# (this does not even deserve the name "programming")
pvSpending = 5000/1.04^30
pvSpending
## [1] 1541.593
# A little smarter with using variables
pvSpending = spending/(1+interestRate/100)^T
# The smartest way: Using functions
saveFun = function(x, r, T){
round(  x/(1+r/100)^T  )
}
saveFun(5000, 0, 30)
## [1] 5000
# Label arguments
#################
saveFun = function(spending, interestRate,
horizon){
x = spending
r = interestRate
T = horizon
round(  x/(1+r/100)^T  )
}
saveFun(spending = 5000, interestRate = 4,
horizon = 30)
## [1] 1542
saveFun(horizon = 30, spending = 5000,
interestRate = 4)
## [1] 1542
saveFun(30, 5000, 4)
## [1] 0
# With labels you can change the order of the arguments,
# without labels, you cannot.
# Default values
#################
saveFun = function(spending = 5000,
interestRate = 4,
horizon = 30){
x = spending
r = interestRate
T = horizon
round(  x/(1+r/100)^T  )
}
saveFun()
## [1] 1542
saveFun(spending = 1000)
## [1] 308
# Optional arguments
####################
# !!! WARNING: THE CODE BELOW IS INCOMPLETE,
#     WE WILL FINISH THIS THE NEXT TIME!!!!
saveFun = function(spending = 5000,
interestRate = 4,
horizon = 30,
get.out.as.text = NULL){
x = spending
r = interestRate
T = horizon
out = round(  x/(1+r/100)^T  )
if(  !is.null(get.out.as.text)  ){
cat(sprintf("If you want to spend %s after %s years
and the interest rate is %s percent,
you have to save %s.", x, T, r, out))
}
}
saveFun1 = function(spending = 5000,
interestRate = 4,
horizon = 30,
get.out.as.text = NULL){
x = spending
r = interestRate
T = horizon
out = round(  x/(1+r/100)^T  )
if(  !is.null(get.out.as.text)  ){
cat(sprintf("If you want to spend %s after %s years
and the interest rate is %s percent,
you have to save %s.", x, T, r, out))
}
}
saveFun1(get.out.as.text = 1)
# Description -------------------------------------------------------------
# In this script, we are going to dive deeper into the
# plotting options
# Header ----------------------------------------------------------------
# The header contains all the preparatory stuff
setwd("/Users/dominiquepaul/xJob/DataWithPythonCourse1/Translation_No_2")
# Load the packages
library(tidyverse)
library(forcats)
# Start with a clean sheet
rm(list = ls())
# Load the data that we prepared in 2_DataBasics.R
load("data/TradeEx_tidy.RData")
# Plotting basics ----------------------------------------------------------------
# What (statistical) variables do we have?
names(D)
# A simple scatterplot
ggplot(D) +
geom_point(aes(gEUR, Exp_All_R))
# Give separate color to observations before 2007 ------------------
# Here is a possible solution
# Create a new so-called "indicator variable".
# For this, the ifelse() function is very convenient.
D <- D %>%
mutate(Period = ifelse(year<2007, 1, 0))
ggplot(D) +
geom_point(aes(gEUR, Exp_All_R, color = Period))
